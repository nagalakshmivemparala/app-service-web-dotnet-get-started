name: DevSecOps implementation

on:
  workflow_call:
    inputs:
      ARTIFACT_NAME:
        required: true
        type: string
        description: Kindly share the artifact name that is to be downloaded from the run workspace.

jobs:
  tags_n_releases:
    name: Create tags and releases
    runs-on: ubuntu-latest
    steps:
      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{inputs.ARTIFACT_NAME}}

      - name: Download bump artifact
        uses: actions/download-artifact@v4
        with:
          name: bump.txt

      - name: Download PR body artifact
        uses: actions/download-artifact@v4
        with:
          name: pr_body.txt

      - name: Read bump value
        run: |
          echo "BUMP=$(cat bump.txt)"
          echo "BUMP=$(cat bump.txt)" >> $GITHUB_ENV

      - name: Read PR body value
        run: |
         cat pr_body.txt
          

      - name: Verify artifact download
        run: |
          ls -al

      # - name: Get previous tag version
      #   id: get_version
      #   run: |
      #     url="https://api.github.com/repos/${{ github.repository }}/releases/latest"
      #     response=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"  "$url")
      #     tag_name=$(echo $response | jq -r '.tag_name // ""')
      #     echo "PREVIOUS_TAG=$tag_name"
      #     echo "PREVIOUS_TAG=$tag_name" >> $GITHUB_ENV
      - name: Fetch All Releases
        run: |
          releases=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases")
          echo "$releases" > releases.json
          echo "$releases"
          echo "Fetched all releases"

      - name: Extract Latest Tag Based on Branch
        run: |
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            previous_dev_tag=$(jq -r '[.[] | select(.tag_name | test("-dev$"))] | max_by(.created_at) | .tag_name // ""' < releases.json)
            previous_tag=$previous_dev_tag
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            previous_prod_tag=$(jq -r '[.[] | select(.tag_name | test("-dev$") | not)] | max_by(.created_at) | .tag_name // ""' < releases.json)
            previous_tag=$previous_prod_tag
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            previous_prod_tag=$(jq -r '[.[] | select(.tag_name | test("-dev$") | not)] | max_by(.created_at) | .tag_name // ""' < releases.json)
            previous_tag=$previous_prod_tag
          fi

          echo "Previous tag for branch $branch: $previous_tag"
          echo "PREVIOUS_TAG=$previous_tag" >> $GITHUB_ENV

      - name: Generate new version
        id: generate_version
        run: |
          echo ${{env.PREVIOUS_TAG}}
          if [ -z "${{env.PREVIOUS_TAG}}" ]; then
            new_version="v1.0.0"
            echo "inside if"
          else
            version="${{ env.PREVIOUS_TAG }}"
            if [[ $version == *"-dev" ]]; then
              version=${version%-dev}
            fi
            major=$(echo $version | cut -d '.' -f 1 | tr -d 'v')
            minor=$(echo $version | cut -d '.' -f 2)
            patch=$(echo $version | cut -d '.' -f 3)
            echo "inside else "

            if [ "${{env.BUMP}}" == "major" ]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [ "${{env.BUMP}}" == "minor" ]; then
              minor=$((minor + 1))
              patch=0
            elif [ "${{env.BUMP}}" == "patch" ]; then
              patch=$((patch + 1))
            fi
            new_version="v$major.$minor.$patch"
          fi
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            new_version="${new_version}-dev"
          fi
          echo "NEW_VERSION=$new_version"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: generate tag
        run: |
          echo "New version is $NEW_VERSION"
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{github.repository}}/git/refs \
          -d '{"ref":"refs/tags/${{env.NEW_VERSION}}","sha":"${{github.sha}}"}' -s | jq -r '.'

      - name: generate release
        run: |
          PR_BODY=$(cat pr_body.txt | sed ':a;N;$!ba;s/\r//g;s/\n/\\n/g')
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{github.repository}}/releases \
          -d '{
            "tag_name":"${{env.NEW_VERSION}}" ,
            "generate_release_notes": true,
            "body": "'"$PR_BODY"'"
              }' -s | tee >(jq -r '.id' >> release_id) | jq -r '.'

          echo "RELEASE_ID=$(cat release_id)" >> $GITHUB_ENV
          echo "Release ID is $(cat release_id)"

      - name: Upload file to release
        run: |
          echo "Release ID is $RELEASE_ID"
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/octet-stream" \
          "https://uploads.github.com/repos/${{github.repository}}/releases/${{env.RELEASE_ID}}/assets?name=${{inputs.ARTIFACT_NAME}}" \
          --data-binary "@${{inputs.ARTIFACT_NAME}}" -s | tee >(jq -r '.id' >> asset_id) | jq -r '.'
          echo "Asset ID is $(cat asset_id)"

      - name: Upload asset_id
        uses: actions/upload-artifact@v4
        with:
          name: asset_id
          path: ./asset_id
          if-no-files-found: warn
          
